// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_1;

namespace Project_1.Migrations
{
    [DbContext(typeof(TimetableContext))]
    partial class TimetableContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("DayWeek", b =>
                {
                    b.Property<int>("DaysId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeeksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DaysId", "WeeksId");

                    b.HasIndex("WeeksId");

                    b.ToTable("DayWeek");
                });

            modelBuilder.Entity("Project_1.ClassTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClassesTimes");
                });

            modelBuilder.Entity("Project_1.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayNameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DayNameId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("Project_1.DayName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DaysNames");
                });

            modelBuilder.Entity("Project_1.DaySubject", b =>
                {
                    b.Property<int>("DayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DayId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("DaySubject");
                });

            modelBuilder.Entity("Project_1.GroupName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GroupsNames");
                });

            modelBuilder.Entity("Project_1.LecturerName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LecturersNames");
                });

            modelBuilder.Entity("Project_1.LocationName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LocationsNames");
                });

            modelBuilder.Entity("Project_1.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassTimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LecturerNameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationNameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectNameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassTimeId");

                    b.HasIndex("LecturerNameId");

                    b.HasIndex("LocationNameId");

                    b.HasIndex("SubjectNameId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Project_1.SubjectName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SubjectsNames");
                });

            modelBuilder.Entity("Project_1.Week", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupNameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeekDateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GroupNameId");

                    b.HasIndex("WeekDateId");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("Project_1.WeekDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WeeksDates");
                });

            modelBuilder.Entity("DayWeek", b =>
                {
                    b.HasOne("Project_1.Day", null)
                        .WithMany()
                        .HasForeignKey("DaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_1.Week", null)
                        .WithMany()
                        .HasForeignKey("WeeksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_1.Day", b =>
                {
                    b.HasOne("Project_1.DayName", "DayName")
                        .WithMany()
                        .HasForeignKey("DayNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayName");
                });

            modelBuilder.Entity("Project_1.DaySubject", b =>
                {
                    b.HasOne("Project_1.Day", "Day")
                        .WithMany("DaysSubjects")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_1.Subject", "Subject")
                        .WithMany("DaysSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Project_1.Subject", b =>
                {
                    b.HasOne("Project_1.ClassTime", "ClassTime")
                        .WithMany()
                        .HasForeignKey("ClassTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_1.LecturerName", "LecturerName")
                        .WithMany()
                        .HasForeignKey("LecturerNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_1.LocationName", "LocationName")
                        .WithMany()
                        .HasForeignKey("LocationNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_1.SubjectName", "SubjectName")
                        .WithMany()
                        .HasForeignKey("SubjectNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassTime");

                    b.Navigation("LecturerName");

                    b.Navigation("LocationName");

                    b.Navigation("SubjectName");
                });

            modelBuilder.Entity("Project_1.Week", b =>
                {
                    b.HasOne("Project_1.GroupName", "GroupName")
                        .WithMany()
                        .HasForeignKey("GroupNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_1.WeekDate", "WeekDate")
                        .WithMany()
                        .HasForeignKey("WeekDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupName");

                    b.Navigation("WeekDate");
                });

            modelBuilder.Entity("Project_1.Day", b =>
                {
                    b.Navigation("DaysSubjects");
                });

            modelBuilder.Entity("Project_1.Subject", b =>
                {
                    b.Navigation("DaysSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
